#!/bin/bash

function DVM () {

  function _SETARRAYS () {
    DRUSHDIR="${HOME}/.dvm";
    DVMVERSIONS=($(cd "${DRUSHDIR}" && git ls-remote --heads | cut -d/ -f3));
    PACKAGES=($(find "${HOME}/.drush" -maxdepth 1 -type d | grep -v cache | cut -d/ -f5));
    LEGACIES=("1.1.0+drupal5" "1.0.0+drupal5" "1.0.0-rc3+drupal5" "1.0.0-rc2+drupal5" "1.0.0-rc1+drupal5" "1.0.0-beta4+drupal5"
    "1.0.0-beta3+drupal5" "1.0.0-beta2+drupal5" "1.0.0-beta1+drupal5" "2.0.0-alpha1+drupal5" "1.2.0+drupal6" "1.4.0+drupal5" "" "1.1.0+drupal6"
    "1.0.0+drupal6" "1.0.0-rc2+drupal6" "1.3.0+drupal5" "1.2.0+drupal5" "1.0.0-rc1+drupal6" "1.0.0-rc11+drupal6" "3.0.0-beta1" "3.0.0-alpha1"
    "2.1.0" "2.0.0" "2.0.0-rc1" "2.0.0-alpha2+drupal7" "2.0.0-alpha2+drupal5" "2.0.0-alpha2+drupal6" "2.0.0-alpha1+drupal6" "2.0.0-alpha1+drupal7"
    "1.0.0-rc2+drupal7" "4.0.0-rc1" "3.3.0" "3.2.0" "3.1.0" "3.0.0" "3.0.0-rc43.0.0-rc3" "3.0.0-rc2" "3.0.0-rc1" "4.1.0" "4.0.0" "4.0.0-rc10"
    "4.0.0-rc9" "4.0.0-rc8" "4.0.0-rc7" "4.0.0-rc6" "4.0.0-rc5" "4.0.0-rc4" "4.0.0-rc3" "debian/4.5-2" "4.5.0" "4.5.0-rc1" "debian/4.4-2"
    "debian/5.0dev-1" "debian/4.4-1" "4.4.0" "debian/4.3-1" "4.3.0" "4.2.0" "4.6.0" "5.3.0" "5.2.0" "5.1.0" "5.0.0" "5.0.0-rc5" "5.0.0-rc4"
    "5.0.0-rc3" "5.0.0-rc2" "5.0.0-rc1" "5.9.0" "5.8.0" "5.7.0" "5.6.0" "5.5.0" "5.4.0");
    COMPOSERVERSIONS=("dev-master" "8.0.x-dev" "8.0.0-rc3" "8.0.0-rc2" "8.0.0-rc1" "8.0.0-beta14" "8.0.0-beta12" "8.0.0-beta11" "7.x-dev"
    "7.1.0" "7.0.0" "7.0.0-rc2" "7.0.0-rc1" "7.0.0-alpha9" "7.0.0-alpha8" "7.0.0-alpha7" "7.0.0-alpha6" "7.0.0-alpha5" "7.0.0-alpha4" "7.0.0-alpha3"
    "7.0.0-alpha2" "7.0.0-alpha1" "6.x-dev" "6.6.0" "6.5.0" "6.4.0" "6.3.0" "6.2.0" "6.1.0" "6.1.0-rc1" "6.0.0" "6.0.0-rc4" "6.0.0-rc3" "6.0.0-rc2"
    "6.0.0-rc1" "dev-php-5.5.9");
    AVAILABLEVERSIONS=();
    AVAILABLEVERSIONS+=($(printf '%s\n' "${LEGACIES[@]}" | sort | uniq | grep -e '^[1|2|3|4|5].'));
    AVAILABLEVERSIONS+=($(printf '%s\n' "${COMPOSERVERSIONS[@]}" | sort | uniq | grep -e '^[6|7|8|9].'));
    VERSIONSINSTALLED=();
    for ITEM in $(find "${DRUSHDIR}/versions" -maxdepth 1 -type d | cut -d/ -f6 | grep "drush-" | grep -v "master"); do
      VERSIONSINSTALLED+=("${ITEM}");
    done
  }


  function _NOARG () {
    if [[ -z "${CLEANARG}" ]]; then
      echo "  Missing argument <version>";
      exit 0;
    fi
  }


  function _INITIALIZE () {
    function __GETCOMPOSER () {
      if [[ -z $(which composer) ]]; then
        echo "Installing composer";
        curl -sS https://getcomposer.org/installer | php
        mv composer.phar "${LINKDIR}/composer"
      fi
    }
    function __UNZIP () {
      if [[ -z $(which unzip) ]]; then
        echo "Installing unzip";
        sudo apt-get install unzip
      fi
    }
    function __PEAR () {
      if [[ -z $(which pear) ]]; then
        curl -O  http://pear.php.net/go-pear.phar;
        sudo php -d detect_unicode=0 go-pear.phar;
        echo "export PATH=\"$PATH:$HOME/pear/bin\"" >> ~/.bash_profile;
        rm -f go-pear.phar;
      fi
    }
    __GETCOMPOSER;
    __PEAR;
  }

  function _PRERUN () {
    if [[ ! -e "${DRUSHDIR}/drush" ]] && [[ ! -d "${DRUSHDIR}" ]]; then
      mkdir -p "${DRUSHDIR}" && cd "${DRUSHDIR}";
      curl -sS https://getcomposer.org/installer | php;
      php composer.phar require drush/drush;
    fi
  }

  function _UPGRADE () {
    for X in "${DVMVERSIONS[@]}"; do
      if [[ "${X}" != "master" ]]; then DVMVERSIONLATEST="${X}"; fi
    done
    if [[ -n "${CLEANARG}" ]]; then
      if [[ ! "${DVMVERSIONS[@]}" =~ [${CLEANARG}] ]]; then _NOARG; exit 0; fi
      case "${CLEANARG}" in
        "master"              ) cd "${DRUSHDIR}"; git pull origin "${CLEANARG}"; ;;
        "${DVMVERSION}"       ) echo "  You're already using ${CLEANARG}"; ;;
        "${DVMVERSIONLATEST}" ) cd "${DRUSHDIR}"; git checkout "${CLEANARG}"; git pull origin "${CLEANARG}"; ;;
        *                     ) cd "${DRUSHDIR}"; git checkout "${CLEANARG}"; git pull origin "${CLEANARG}"; ;;
      esac
    else
      case "${DVMVERSION}" in
        "master"              ) cd "${DRUSHDIR}"; git pull origin "${DVMVERSION}"; ;;
        *                     ) cd "${DRUSHDIR}"; git checkout "${DVMVERSIONLATEST}"; git pull origin "${DVMVERSIONLATEST}"; ;;
      esac
    fi
  }

function _RUN () {

    case "${ARGUMENTS}" in
      *"use"*)        _SWITCH; ;;
      *"exec"*)       _EXEC ;;
      *"pkg"*)        _GETPKG; ;;
      *"current"*)    if [[ -n $(which drush) ]]; then drush status | grep "Drush version" | cut -d: -f2; fi ;;
      *"status"*)     if [[ -n $(which drush) ]]; then drush status; fi ;;
      *"install"*)    _INSTALL; ;;
      *"ls-local"*)   _FETCH_LOCAL; ;;
      *"ls-remote"*)  _FETCH_REMOTE; ;;
      *"initialize"*) _INITIALIZE; ;;
      *"upgrade"*)    _UPGRADE; ;;
    esac
  }

  function _SWITCH () {
    if [[ -n "${CLEANARG}" ]]; then
      if [[ -d "${DRUSHVERDIR}" ]]; then
        if [[ -e "${DRUSHVERDIR}/vendor/bin/drush" ]]; then
          ln -sF "${DRUSHVERDIR}/vendor/bin/drush" "${LINKDIR}/drush" &> /dev/null;
        elif [[ -e "${DRUSHVERDIR}/drush" ]]; then
          ln -sF "${DRUSHVERDIR}/drush" "${LINKDIR}/drush" &> /dev/null;
          cd "${DRUSHVERDIR}";
          if [[ ! -e "./includes/table.inc" ]]; then
            if [[ -e "${HOME}/pear/share/pear/Console/Table.php" ]]; then
              cp "${HOME}/pear/share/pear/Console/Table.php" "${DRUSHVERDIR}/includes/table.inc";
            else
              wget http://download.pear.php.net/package/Console_Table-1.1.4.tgz;
              tar -zxvf Console_Table-1.1.4.tgz;
              cp ./Console_Table-1.1.4/Table.php ./includes/table.inc;
              rm -rf ./Console_Table-1.1.4;
            fi
          fi
        fi
        if [[ -e "${DRUSHDIR}/drush" ]]; then
          if [[ -n $("${DRUSHDIR}/drush" status | grep "version") ]]; then
            echo "  Drush is now using v${CLEANARG}";
          elif [[ $("${DRUSHDIR}/drush" status) == *"Could not find a valid Drupal installation"* ]]; then
            INSTALLSTATUS=$("${DRUSHDIR}/drush" status);
            echo "  Drush is now using v${CLEANARG}";
            echo "  ${INSTALLSTATUS}";
          else
            echo "  There was an error in installation.";
          fi
        fi
      else
        echo "  Drush v${CLEANARG} is not installed."
      fi
    else
      _NOARG;
    fi
    exit 0;
  }

  function _EXEC () {
    CLEANARG=$(echo "${CLEANARG}" | cut -d ' ' -f1);
    DRUSHVERDIR="${DRUSHDIR}/versions/drush-${CLEANARG}";
    if [[ -n "${CLEANARG}" ]]; then
      if [[ -e "${DRUSHDIR}/drush" ]]; then
        COMMAND="${ARGUMENTS[*]}";
        COMMAND=${COMMAND/exec/};
        COMMAND=${COMMAND/${CLEANARG}/};
        COMMAND=${COMMAND/  / };
        cd "${DRUSHVERDIR}";
        if [[ -e "./vendor/bin/drush" ]]; then
          EXECUTABLE="vendor/bin/drush";
        else
          EXECUTABLE=$(find . -type f | grep -v "drush/" | grep -v "drush." | grep drush);
          EXECUTABLE=${EXECUTABLE/.\//};
        fi
        eval "${DRUSHVERDIR}/${EXECUTABLE} ${COMMAND}";
      else
        echo "  Drush v${CLEANARG} is not installed."
      fi
    else
      _NOARG;
    fi
    exit 0;
  }

  function _GETPKG () {
    function __PREP () {
      PACKAGESEARCH=${ARGUMENTS};
      PACKAGESEARCH=${PACKAGESEARCH/pkg/};
      PACKAGESEARCH=${PACKAGESEARCH/show/};
      PACKAGESEARCH=${PACKAGESEARCH/download/};
      PACKAGESEARCH=${PACKAGESEARCH/reinstall/};
      PACKAGESEARCH=${PACKAGESEARCH/uninstall/};
      PACKAGESEARCH=${PACKAGESEARCH/  / };
      PACKAGESEARCH=${PACKAGESEARCH/ /};
      PACKAGESEARCH=${PACKAGESEARCH/install/};
    }
    function __SHOW {
      __PREP;
      if [[ -n "${PACKAGES[@]}" ]]; then
        echo "  The following drush packages are installed:";
        for X in "${PACKAGES[@]}"; do
          if [[ -n "${X}" ]]; then
            if [[ -n ${PACKAGESEARCH} ]]; then
              echo "    ${X}" | grep "${PACKAGESEARCH}";
            else
              echo "    ${X}";
            fi
          fi
        done
      else
        if [[ -n "${PACKAGESEARCH}" ]]; then
          echo "  Package search has returned no results.";
        else
          echo "  No drush packages are installed.";
        fi
      fi
    }
    function __DOWNLOAD () {
      __PREP;
      if [[ -n "${PACKAGESEARCH}" ]]; then
        if [[ "${ARGUMENTS}" == *"reinstall"* ]]; then
          if [[ -d "${HOME}/.drush/${PACKAGESEARCH}" ]]; then
            echo "  Uninstalling ${PACKAGESEARCH}...";
            rm -rf "${HOME}/.drush/${PACKAGESEARCH}"; fi
            echo "  Done!";
            if [[ $(which drush) ]]; then
              echo "  Installing ${PACKAGESEARCH}";
              cd "${HOME}/.drush" && drush dl -y "${PACKAGESEARCH}";
              echo "  Done!";
            else
              echo "  Drush was not found."
            fi
        elif [[ "${ARGUMENTS}" == *"uninstall"* ]]; then
          if [[ ! -d "${HOME}/.drush/${PACKAGESEARCH}" ]]; then
            echo "  ${PACKAGESEARCH} could not be found on this system.";
          else
            echo "  Uninstalling ${PACKAGESEARCH}...";
            rm -rf "${HOME}/.drush/${PACKAGESEARCH}";
            echo "  Done!";
          fi
        elif [[ ! "${ARGUMENTS}" == *"uninstall"* ]] && [[ ! "${ARGUMENTS}" == *"reinstall"* ]]; then
          if [[ -d "${HOME}/.drush/${PACKAGESEARCH}" ]]; then
            echo "  ${PACKAGESEARCH} was found on this system and cannot install.";
          else
            if [[ $(which drush) ]]; then
              echo "  Installing ${PACKAGESEARCH}";
              cd "${HOME}/.drush" && drush dl -y "${PACKAGESEARCH}";
              echo "  Done!";
            else
              echo "  Drush was not found."
            fi
          fi
        fi
        else
          echo "  Missing argument <name>";
        fi
    }
    if [[ "${ARGUMENTS}" == *"show"* ]]; then __SHOW; fi
    if [[ "${ARGUMENTS}" == *"install"* ]]; then __DOWNLOAD; fi
      exit 0;
  }

  function _INSTALL () {
    function __GETVERSIONS () {
      echo "  Checking version number...";
      if [[ -n "${CLEANARG}" ]]; then
        for X in "${AVAILABLEVERSIONS[@]}"; do
          if [[ "${CLEANARG}" == "${X}" ]]; then
            VALIDVERSION=true;
          fi
        done
        if [[ "${VALIDVERSION}" == true ]]; then
          VALIDVERSION=true;
          echo "  Version ${CLEANARG} was found.";
        else
          VALIDVERSION=false;
          echo "  Version ${CLEANARG} was not found.";
          echo "  ${CLEANARG} was not found in list, so DVM will search remotely...";
          declare -a AVAILABLEVERSIONS=($(cd "${DRUSHDIR}" && composer show drush/drush -q | grep versions | tr ", " "\n"));
          for X in "${AVAILABLEVERSIONS[@]}"; do
            if [[ "${CLEANARG}" == "${X}" ]]; then
              VALIDVERSION=true;
            fi
          done
        fi
      else
        _NOARG;
      fi
    }
    function __INSTALL_ACTION () {
      case "${BASEVERSION}" in
        "1"|"2"|"3"|"4"|"5")  if [[ "${CLEANARG}" == *"${LEGACIES[@]}"* ]]; then
                                mkdir -p "${DRUSHDIR}/versions/${CLEANARG}";
                                cd "${DRUSHDIR}/versions/";
                                wget "https://github.com/drush-ops/drush/archive/${CLEANARG}.zip";
                                unzip "${CLEANARG}.zip"
                                rm -f "${CLEANARG}.zip";
                              else
                                echo "  Drush v${CLEANARG} does not exist.";
                              fi
                              ;;
        "6"|"7"|"8")          mkdir -p "${DRUSHVERDIR}";
                              cd "${DRUSHVERDIR}";
                              curl -sS https://getcomposer.org/installer | php;
                              php composer.phar require "drush/drush:${VERSION}";
                              cd "${DRUSHDIR}/versions" && rm -rf "./${CLEANARG}";
                              ;;
      esac
    }
    function __INSTALL () {
      if [[ -n "${CLEANARG}" ]]; then
        if [[ -d "${DRUSHVERDIR}" ]]; then
          echo "Drush v${CLEANARG} has already been installed.";
        else
          __GETVERSIONS;
          if [[ "${VALIDVERSION}" == true ]]; then
            __INSTALL_ACTION;
          fi
        fi
      else
        _NOARG;
      fi
    }
    function __REINSTALL () {
      if [[ -n "${CLEANARG}" ]]; then
        if [[ -d "${DRUSHVERDIR}" ]]; then
          VALIDVERSION=true;
          __INSTALL_ACTION;
        else
          echo "Drush v${CLEANARG} has't previously been installed.";
          exit 0;
        fi
      else
        _NOARG;
      fi
    }
    function __UNINSTALL () {
      if [[ -n "${CLEANARG}" ]]; then
        INSTALLED=$("${DRUSHDIR}/drush" --version | cut -d: -f2);
        INSTALLED=${INSTALLED/  /};
        INSTALLED=${INSTALLED/ /};
        TOUNINSTALL=$(_FETCH_LOCAL);
        TOUNINSTALL=${TOUNINSTALL/  /};
        TOUNINSTALL=${TOUNINSTALL/ /};
        if [[ ! "${TOUNINSTALL}" == *"${INSTALLED}"* ]]; then
          rm -rf "${DRUSHDIR}/versions/drush-${CLEANARG}";
          echo "Drush v${CLEANARG} has been uninstalled.";
        else
          echo "You cannot uninstall a currently active version."
          exit 0;
        fi
      else
        _NOARG;
      fi
    }
    case "${STATE}" in
      "install" )   __INSTALL; ;;
      "reinstall" ) __REINSTALL; ;;
      "uninstall" ) __UNINSTALL; ;;
    esac
  }

  function _FETCH_REMOTE () {
    cd "${DRUSHDIR}";
    declare -a AVAILABLEVERSIONS=($(cd "${DRUSHDIR}" && composer show drush/drush | sort | uniq | grep versions | tr ", " "\n"));
    AVAILABLEVERSIONS=($(printf '%s\n' "${AVAILABLEVERSIONS[@]}" | sort | uniq | grep -e '^[6|7|8|9].'));
    ALLVERSIONS=("${LEGACIES[@]}" "${AVAILABLEVERSIONS[@]}");
    if [[ -z "${CLEANARG}" ]]; then
      for X in "${ALLVERSIONS[@]}"; do          echo "      ${X}"; done
    else
      if [[ "${BASEVERSION}" == "1" ]] || [[ "${BASEVERSION}" == "2" ]] || [[ "${BASEVERSION}" == "3" ]] || [[ "${BASEVERSION}" == "4" ]] || [[ "${BASEVERSION}" == "5" ]]; then
        for X in "${LEGACIES[@]}"; do          echo "      ${X}" | grep "${CLEANARG}"; done
      fi
      if [[ "${BASEVERSION}" == "6" ]] || [[ "${BASEVERSION}" == "7" ]] || [[ "${BASEVERSION}" == "8" ]]; then
        for X in "${AVAILABLEVERSIONS[@]}"; do echo "      ${X}" | grep "${CLEANARG}"; done
      fi
    fi
    exit 0;
  }

  function _FETCH_LOCAL () {
    declare -a VERSIONSINSTALLED=();
    for ITEM in $(find "${DRUSHDIR}/versions" -maxdepth 1 -type d | cut -d/ -f6 | grep "drush-" | grep -v "master" | sort | uniq); do
      VERSIONSINSTALLED+=("${ITEM}");
    done
    INSTALLED=$("${DRUSHDIR}/drush" --version | cut -d: -f2);
    INSTALLED=${INSTALLED/  /};
    INSTALLED=${INSTALLED/ /};
    for X in "${VERSIONSINSTALLED[@]}"; do
      if [[ "${X}" == "drush-${INSTALLED}" ]]; then tput setaf 2; fi
      if [[ "${X}" = *"${BASEVERSION}"* ]]; then
        if [[ -z "${CLEANARG}" ]]; then
          echo "      ${X/drush-/}";
        else
          echo "      ${X/drush-/}" | grep ${CLEANARG};
        fi
        if [[ "${X}" == "drush-${INSTALLED}" ]]; then tput sgr0; fi
      fi
    done
    exit 0;
  }

  function _HELP () {
    echo " Drush Version Manager";
    echo " ";
    echo " Note: <version> refers to any version-like string dvm understands. This includes:";
    echo "   - full version numbers (7.0.0, 7.1.0, 8.0.0-rc3)";
    echo " ";
    echo " Usage:";
    echo "   dvm help                                  Show this message.";
    echo "   dvm install <version>                     Download and install <version>.";
    echo "   dvm reinstall <version>                   Reinstall a version.";
    echo "   dvm uninstall <version>                   Uninstall a version.";
    echo "   dvm use <version>                         Change the drush symlink to use another version.";
    echo "   dvm exec <version> <command>              Change the drush symlink to use another version.";
    echo "   dvm current                               Display currently activated version.";
    echo "   dvm status                                Display current status.";
    echo "   dvm pkg show                              List installed extensions.";
    echo "   dvm pkg show <name>                       List installed extensions matching a search criteria";
    echo "   dvm pkg install <name>                    Install an extension matching <name>";
    echo "   dvm pkg reinstall <name>                  Reinstall an extension matching <name>";
    echo "   dvm pkg uninstall <name>                  Uninstall an extension matching <name>";
    echo "   dvm ls-local                              List installed versions.";
    echo "   dvm ls-local <version>                    List installed versions matching a search criteria";
    echo "   dvm ls-remote                             List remote versions available for install";
    echo "   dvm ls-remote <version>                   List remote versions matching a search criteria";
    echo "   dvm initialize                            Install any required dependencies";
    echo "   dvm upgrade                               Gets the latest version of dvm";
    echo " ";
    echo " Example:";
    echo "   dvm install 7.0.0                         Install a specific version number";
    echo "   dvm use 7.0.0                             Tells the system to use drush 7.0.0";
    echo "   dvm exec 7.0.0 status                     Use Drush 7.0.0 to execute the status command3";
  }

  if [[ "${*}" == *"help"* ]] || [[ -z "${*}" ]]; then
    _HELP;
    exit 0;
  fi

  ARGUMENTS="${*}";
  _PRERUN "${*}";
  _SETARRAYS;
  _RUN "${ARGUMENTS}";
}

function SETVARS () {

  DVMVERSION=$(git rev-parse --abbrev-ref HEAD);
  LINKDIR="${HOME}/.dvm";
  DRUSHDIR="${HOME}/.dvm";
  if [[ ! -d "${DRUSHDIR}" ]]; then mkdir -p "${DRUSHDIR}"; fi
  if [[ ! -d "${LINKDIR}" ]]; then mkdir -p "${LINKDIR}"; fi
  if [[ "${*}" == *"reinstall"* ]]; then STATE="reinstall"; fi
  if [[ "${*}" == *"uninstall"* ]]; then STATE="uninstall"; fi
  if [[ "${*}" == *"install"* ]] && [[ "${STATE}" != "reinstall" ]] && [[ "${STATE}" != "uninstall" ]]; then STATE="install"; fi
  if [[ "${*}" == *"exec"* ]]; then STATE="exec"; fi
  if [[ "${*}" == *"upgrade"* ]]; then STATE="upgrade"; fi

  CLEANARG="${*}";
  CLEANARG=${CLEANARG/uninstall/};
  CLEANARG=${CLEANARG/reinstall/};
  CLEANARG=${CLEANARG/install/};
  CLEANARG=${CLEANARG/update/};
  CLEANARG=${CLEANARG/use/};
  CLEANARG=${CLEANARG/exec/};
  CLEANARG=${CLEANARG/pkg/};
  CLEANARG=${CLEANARG/show/};
  CLEANARG=${CLEANARG/download/};
  CLEANARG=${CLEANARG/ls-local/};
  CLEANARG=${CLEANARG/ls-remote/};
  CLEANARG=${CLEANARG/upgrade/};
  CLEANARG=${CLEANARG/  /};
  CLEANARG=${CLEANARG/ /};
  VERSION="${CLEANARG}";

  BASEVERSION=${VERSION::1};
  DRUSHVERDIR="${DRUSHDIR}/versions/drush-${VERSION}";

}

SETVARS "${*}";
DVM "${*}";
