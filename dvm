#!/bin/bash

function DVM () {

  function _NOARG () {
    if [[ -z "${CLEANARG}" ]]; then
      echo "  Missing argument <version>";
      exit 0;
    fi
  }

  function _INITIALIZE () {
    function __GETCOMPOSER () {
      if [[ -z $(which composer) ]]; then
        echo "Installing composer";
        curl -sS https://getcomposer.org/installer | php
        mv composer.phar /usr/local/bin/composer
      fi
    }
    function __UNZIP () {
      if [[ -z $(which unzip) ]]; then
        echo "Installing unzip";
        sudo apt-get install unzip
      fi
    }
    __GETCOMPOSER;
  }

  function _PRERUN () {
    if [[ ! -e "${DRUSHDIR}/drush" ]] && [[ ! -d "${DRUSHDIR}" ]]; then
      mkdir -p "${DRUSHDIR}" && cd "${DRUSHDIR}";
      curl -sS https://getcomposer.org/installer | php;
      php composer.phar require drush/drush;
    fi
  }

function _RUN () {

    case "${*}" in
      *"use"*)        _SWITCH; ;;
      *"exec"*)       _EXEC ;;
      *"current"*)    drush --version | cut -d: -f2; ;;
      *"status"*)     drush status; ;;
      *"install"*)    _INSTALL; ;;
      *"ls-local"*)   _FETCH_LOCAL; ;;
      *"ls-remote"*)  _FETCH_REMOTE; ;;
      *"initialize"*) _INITIALIZE; ;;
    esac
  }

  function _SWITCH () {
    if [[ -n "${CLEANARG}" ]]; then
      CLEANARG=${CLEANARG/+/-};
      DRUSHVERDIR=${DRUSHVERDIR/+/-};
      if [[ -d "${DRUSHVERDIR}" ]]; then
        echo "  Changing to v${CLEANARG}";
        echo "  Password may be required..."
        if [[ -e "${DRUSHVERDIR}/vendor/bin/drush" ]]; then
          unalias drush;
          sudo rm -f "/usr/local/bin/drush";
          sudo ln -s "${DRUSHVERDIR}/vendor/bin/drush" "/usr/local/bin/drush";
        fi
        if [[ -e "${DRUSHVERDIR}/drush.bat" ]]; then
          unalias drush;
          sudo rm -f "/usr/local/bin/drush";
          alias drush="cd ${DRUSHVERDIR} && php drush.php ${*}";
        fi
        INSTALLED=$(drush --version | cut -d: -f2);
        INSTALLED=${INSTALLED/  /};
        INSTALLED=${INSTALLED/ /};
        if [[ -n "${INSTALLED}" ]]; then
          echo "  Drush is now using ${INSTALLED}";
        else
          echo "  Drush is now using ${CLEANARG}";
        fi
      else
        echo "  Drush v${CLEANARG} is not installed."
      fi
    else
      _NOARG;
    fi
    exit 0;
  }

  function _EXEC () {
    CLEANARG=$(echo "${CLEANARG}" | cut -d\  -f1);
    DRUSHVERDIR="${DRUSHDIR}/versions/drush-${CLEANARG}";
    if [[ -n "${CLEANARG}" ]]; then
      if [[ -e "${DRUSHVERDIR}/vendor/bin/drush" ]]; then
        COMMAND="${ARGUMENTS[*]}";
        COMMAND=${COMMAND/exec/};
        COMMAND=${COMMAND/${CLEANARG}/};
        COMMAND=${COMMAND/  / };
        echo "${DRUSHVERDIR}/vendor/bin/drush ${COMMAND}";
        eval "${DRUSHVERDIR}/vendor/bin/drush ${COMMAND}";
      else
        echo "  Drush v${CLEANARG} is not installed."
      fi
    else
      _NOARG;
    fi
    exit 0;
  }

  function _INSTALL () {
    function __GETVERSIONS () {
      echo "  Checking version number...";
      if [[ -n "${CLEANARG}" ]]; then
        if [[ -n $(cd "${DRUSHDIR}" && composer show drush/drush | grep versions | grep "${CLEANARG}") ]]; then
          VALIDVERSION=true;
          echo "  Version ${CLEANARG} was found.";
        else
          if [[ "${CLEANARG}" == *"${LEGACIES[@]}"* ]]; then
            VALIDVERSION=true;
            echo "  Version ${CLEANARG} was found.";
          else
            VALIDVERSION=false;
            echo "  Version ${CLEANARG} was not found.";
          fi
        fi
      fi
    }
    function __INSTALL_ACTION () {
      case "${BASEVERSION}" in
        "1"|"2"|"3"|"4"|"5")  if [[ "${CLEANARG}" == *"${LEGACIES[@]}"* ]]; then
                                mkdir -p "${DRUSHDIR}/versions/${CLEANARG}";
                                cd "${DRUSHDIR}/versions/";
                                wget "https://github.com/drush-ops/drush/archive/${CLEANARG}.zip";
                                unzip "${CLEANARG}.zip"
                                rm -f "${CLEANARG}.zip";
                              else
                                echo "  Drush v${CLEANARG} does not exist.";
                              fi
                              ;;
        "6"|"7"|"8")          mkdir -p "${DRUSHVERDIR}";
                              cd "${DRUSHVERDIR}";
                              curl -sS https://getcomposer.org/installer | php;
                              php composer.phar require "drush/drush:${VERSION}";
                              ;;
      esac
    }
    function __INSTALL () {
      if [[ -n "${CLEANARG}" ]]; then
        if [[ -d "${DRUSHVERDIR}" ]]; then
          echo "Drush v${CLEANARG} has already been installed.";
        else
          __GETVERSIONS;
          if [[ "${VALIDVERSION}" == true ]]; then
            __INSTALL_ACTION;
          fi
        fi
      else
        _NOARG;
      fi
    }
    function __REINSTALL () {
      if [[ -n "${CLEANARG}" ]]; then
        if [[ ! -d "${DRUSHVERDIR}" ]]; then
          __GETVERSIONS;
          if [[ "${VALIDVERSION}" == true ]]; then
            __INSTALL_ACTION;
          fi
        else
          echo "Drush v${CLEANARG} has already been installed.";
          exit 0;
        fi
      else
        _NOARG;
      fi
    }
    function __UNINSTALL () {
      if [[ -n "${CLEANARG}" ]]; then
        INSTALLED=$(drush --version | cut -d: -f2);
        INSTALLED=${INSTALLED/  /};
        INSTALLED=${INSTALLED/ /};
        TOUNINSTALL=$(_FETCH_LOCAL);
        TOUNINSTALL=${TOUNINSTALL/  /};
        TOUNINSTALL=${TOUNINSTALL/ /};
        if [[ ! "${TOUNINSTALL}" == *"${INSTALLED}"* ]]; then
          rm -rf "${DRUSHDIR}/versions/drush-${CLEANARG}";
          echo "Drush v${CLEANARG} has been uninstalled.";
        else
          echo "You cannot uninstall a currently active version."
          exit 0;
        fi
      else
        _NOARG;
      fi
    }
    case "${STATE}" in
      "install" )   __INSTALL; ;;
      "reinstall" ) __REINSTALL; ;;
      "uninstall" ) __UNINSTALL; ;;
    esac
  }

  function _FETCH_REMOTE () {
    declare -a AVAILABLEVERSIONS=($(composer show drush/drush | grep versions | tr ", " "\n"));
    declare -a LEGACIES=("1.1.0+drupal5" "1.0.0+drupal5" "1.0.0-rc3+drupal5" "1.0.0-rc2+drupal5" "1.0.0-rc1+drupal5" "1.0.0-beta4+drupal5"
    "1.0.0-beta3+drupal5" "1.0.0-beta2+drupal5" "1.0.0-beta1+drupal5" "2.0.0-alpha1+drupal5" "1.2.0+drupal6" "1.4.0+drupal5" "" "1.1.0+drupal6"
    "1.0.0+drupal6" "1.0.0-rc2+drupal6" "1.3.0+drupal5" "1.2.0+drupal5" "1.0.0-rc1+drupal6" "1.0.0-rc11+drupal6" "3.0.0-beta1" "3.0.0-alpha1"
    "2.1.0" "2.0.0" "2.0.0-rc1" "2.0.0-alpha2+drupal7" "2.0.0-alpha2+drupal5" "2.0.0-alpha2+drupal6" "2.0.0-alpha1+drupal6" "2.0.0-alpha1+drupal7"
    "1.0.0-rc2+drupal7" "4.0.0-rc1" "3.3.0" "3.2.0" "3.1.0" "3.0.0" "3.0.0-rc43.0.0-rc3" "3.0.0-rc2" "3.0.0-rc1" "4.1.0" "4.0.0" "4.0.0-rc10"
    "4.0.0-rc9" "4.0.0-rc8" "4.0.0-rc7" "4.0.0-rc6" "4.0.0-rc5" "4.0.0-rc4" "4.0.0-rc3" "debian/4.5-2" "4.5.0" "4.5.0-rc1" "debian/4.4-2"
    "debian/5.0dev-1" "debian/4.4-1" "4.4.0" "debian/4.3-1" "4.3.0" "4.2.0" "4.6.0" "5.3.0" "5.2.0" "5.1.0" "5.0.0" "5.0.0-rc5" "5.0.0-rc4"
    "5.0.0-rc3" "5.0.0-rc2" "5.0.0-rc1" "5.9.0" "5.8.0" "5.7.0" "5.6.0" "5.5.0" "5.4.0");
    if [[ -z "${CLEANARG}" ]]; then
      for X in "${LEGACIES[@]}"; do          echo "      ${X}" | grep "1."; done
      for X in "${LEGACIES[@]}"; do          echo "      ${X}" | grep "2."; done
      for X in "${LEGACIES[@]}"; do          echo "      ${X}" | grep "3."; done
      for X in "${LEGACIES[@]}"; do          echo "      ${X}" | grep "4."; done
      for X in "${LEGACIES[@]}"; do          echo "      ${X}" | grep "5."; done
      for X in "${AVAILABLEVERSIONS[@]}"; do echo "      ${X}" | grep "6."; done
      for X in "${AVAILABLEVERSIONS[@]}"; do echo "      ${X}" | grep "7."; done
      for X in "${AVAILABLEVERSIONS[@]}"; do echo "      ${X}" | grep "8."; done
    else
      for X in "${LEGACIES[@]}"; do          echo "      ${X}" | grep "${CLEANARG}"; done
      for X in "${AVAILABLEVERSIONS[@]}"; do echo "      ${X}" | grep "${CLEANARG}"; done
    fi
    echo "${LEGACIES[@]}" | sort | uniq > out.data;
    exit 0;
  }

  function _FETCH_LOCAL () {
    declare -a VERSIONSINSTALLED=();
    for ITEM in $(find "${DRUSHDIR}/versions" -maxdepth 1 -type d | cut -d/ -f6 | grep "drush-" | grep -v "master"); do
      VERSIONSINSTALLED+=("${ITEM}");
    done
    INSTALLED=$(drush --version | cut -d: -f2);
    INSTALLED=${INSTALLED/  /};
    INSTALLED=${INSTALLED/ /};
    for X in "${VERSIONSINSTALLED[@]}"; do
      if [[ "${X}" == "drush-${INSTALLED}" ]]; then tput setaf 2; fi
      if [[ "${X}" = *"drush-${BASEVERSION}"* ]]; then
        if [[ -z "${CLEANARG}" ]]; then
          echo "      ${X}";
        else
          echo "      ${X}" | grep ${CLEANARG};
        fi
      fi
      if [[ "${X}" == "drush-${INSTALLED}" ]]; then tput sgr0; fi
    done
    exit 0;
  }

  function _HELP () {
    echo " Drush Version Manager";
    echo " ";
    echo " Note: <version> refers to any version-like string dvm understands. This includes:";
    echo "   - full version numbers (7.0.0, 7.1.0, 8.0.0-rc3)";
    echo " ";
    echo " Usage:";
    echo "   dvm help                                  Show this message.";
    echo "   dvm install <version>                     Download and install <version>.";
    echo "   dvm reinstall <version>                   Reinstall a version.";
    echo "   dvm uninstall <version>                   Uninstall a version.";
    echo "   dvm use <version>                         Change the drush symlink to use another version.";
    echo "   dvm exec <version> <command>              Change the drush symlink to use another version.";
    echo "   dvm current                               Display currently activated version.";
    echo "   dvm status                                Display current status.";
    echo "   dvm ls-local                              List installed versions.";
    echo "   dvm ls-local <version>                    List installed versions matching a search criteria";
    echo "   dvm ls-remote                             List remote versions available for install";
    echo "   dvm ls-remote <version>                   List remote versions matching a search criteria";
    echo " ";
    echo " Example:";
    echo "   dvm install 7.0.0                         Install a specific version number";
    echo "   dvm use 7.0.0                             Tells the system to use drush 7.0.0";
    echo "   dvm exec 7.0.0 status                     Use Drush 7.0.0 to execute the status command3";
  }

  if [[ "${*}" == *"help"* ]] || [[ -z "${*}" ]]; then
    _HELP;
    exit 0;
  fi

  ARGUMENTS="${*}";
  _PRERUN "${*}";
  _RUN "${ARGUMENTS}";
}

function SETVARS () {

  if [[ "${*}" == *"reinstall"* ]]; then STATE="reinstall"; fi
  if [[ "${*}" == *"uninstall"* ]]; then STATE="uninstall"; fi
  if [[ "${*}" == *"install"* ]] && [[ "${STATE}" != "reinstall" ]] && [[ "${STATE}" != "uninstall" ]]; then STATE="install"; fi
  if [[ "${*}" == *"exec"* ]]; then STATE="exec"; fi

  CLEANARG="${*}";
  CLEANARG=${CLEANARG/uninstall/};
  CLEANARG=${CLEANARG/reinstall/};
  CLEANARG=${CLEANARG/install/};
  CLEANARG=${CLEANARG/update/};
  CLEANARG=${CLEANARG/use/};
  CLEANARG=${CLEANARG/exec/};
  CLEANARG=${CLEANARG/ls-local/};
  CLEANARG=${CLEANARG/ls-remote/};
  CLEANARG=${CLEANARG/  /};
  CLEANARG=${CLEANARG/ /};

  case "${CLEANARG}" in
    1*)  VERSION="${CLEANARG}"; ;;
    2*)  VERSION="${CLEANARG}"; ;;
    3*)  VERSION="${CLEANARG}"; ;;
    4*)  VERSION="${CLEANARG}"; ;;
    5*)  VERSION="${CLEANARG}"; ;;
    6*)  VERSION="${CLEANARG}"; ;;
    7*)  VERSION="${CLEANARG}"; ;;
    8*)  VERSION="${CLEANARG}"; ;;
  esac

  DRUSHDIR="${HOME}/drush";
  BASEVERSION=${VERSION::1};
  DRUSHVERDIR="${DRUSHDIR}/versions/drush-${VERSION}";

  declare -a LEGACIES=("1.1.0+drupal5" "1.0.0+drupal5" "1.0.0-rc3+drupal5" "1.0.0-rc2+drupal5" "1.0.0-rc1+drupal5" "1.0.0-beta4+drupal5"
  "1.0.0-beta3+drupal5" "1.0.0-beta2+drupal5" "1.0.0-beta1+drupal5" "2.0.0-alpha1+drupal5" "1.2.0+drupal6" "1.4.0+drupal5" "" "1.1.0+drupal6"
  "1.0.0+drupal6" "1.0.0-rc2+drupal6" "1.3.0+drupal5" "1.2.0+drupal5" "1.0.0-rc1+drupal6" "1.0.0-rc11+drupal6" "3.0.0-beta1" "3.0.0-alpha1"
  "2.1.0" "2.0.0" "2.0.0-rc1" "2.0.0-alpha2+drupal7" "2.0.0-alpha2+drupal5" "2.0.0-alpha2+drupal6" "2.0.0-alpha1+drupal6" "2.0.0-alpha1+drupal7"
  "1.0.0-rc2+drupal7" "4.0.0-rc1" "3.3.0" "3.2.0" "3.1.0" "3.0.0" "3.0.0-rc43.0.0-rc3" "3.0.0-rc2" "3.0.0-rc1" "4.1.0" "4.0.0" "4.0.0-rc10"
  "4.0.0-rc9" "4.0.0-rc8" "4.0.0-rc7" "4.0.0-rc6" "4.0.0-rc5" "4.0.0-rc4" "4.0.0-rc3" "debian/4.5-2" "4.5.0" "4.5.0-rc1" "debian/4.4-2"
  "debian/5.0dev-1" "debian/4.4-1" "4.4.0" "debian/4.3-1" "4.3.0" "4.2.0" "4.6.0" "5.3.0" "5.2.0" "5.1.0" "5.0.0" "5.0.0-rc5" "5.0.0-rc4"
  "5.0.0-rc3" "5.0.0-rc2" "5.0.0-rc1" "5.9.0" "5.8.0" "5.7.0" "5.6.0" "5.5.0" "5.4.0");

  declare -a VERSIONSINSTALLED=();
  for ITEM in $(find "${DRUSHDIR}/versions" -maxdepth 1 -type d | cut -d/ -f6 | grep "drush-" | grep -v "master"); do
    VERSIONSINSTALLED+=("${ITEM}");
  done

}

SETVARS "${*}";
DVM "${*}";
